# This script removes sequences according to specified rules in local databades (in each instance of the pipeline). 
# It also produces the list of removed sequences so that they can be used for removing in the ready to go folder. 

# input: 
# - Report of sister taxa
# - rules

# Running:
# - Put all the imput files and folders in the same folder and run scrip with ruby: "ruby seqs2remove.rb"

# ruby seqs2remove.rb path2Files sisterReport rules seqs2remove_out nonHomologs mode
# ruby seqs2remove.rb ./ sisterReport rules seqs2remove_out nonHomologs c1

sister_report = File.open(ARGV[0], 'r').readlines()
rules = File.open(ARGV[1], 'r').readlines()
sequences_contamination = File.open(ARGV[2], 'w')
trees_contamination = File.open(ARGV[2] + '_treesWcont', 'w')
#A list that holds every sequence to remove across all trees
seqs2remove = Array.new
nonhomologs = File.open(ARGV[3], 'r').readlines()
total2remove = nonhomologs
treeFolder = ARGV[4]
nm_toggle = ARGV[5]

puts "NM_TOGGLE: " + nm_toggle


# ---- correcting .fasta format ----
def correctFasta(rawFasta)	
	fastaseqs = Array.new
	seq = ''
	
	rawFasta.each do |line|
		if line =~ /^>/
			if seq != '' then fastaseqs << seq end	
			fastaseqs << line.gsub("\n", "")
			seq = ''
		end
		if line =~ /^([A-z]|\*)/ then seq = seq + line.gsub("\n", "") end
	end
	fastaseqs << seq	
	return fastaseqs		
end
#------------------------------------

count = 0
treesWcontamination = Array.new

#For every sequence in the large sister report file (generated by walk_tree_contamination_single.py)
sister_report.each do |line|
	count += 1
	line = line.chomp
	line = line.split("\t")
	og = line[0]
	taxon = line[1]
	sequence = line[2]
	sister = line[3]
	sister_minors = line[4].split(",")

	#For every taxon in the input rules file
	rules.each do |rule|
		rule = rule.chomp
		rule = rule.split("\t")
		taxon_rule = rule[0]
		
		#Get the rules for the current sequence's taxon
		if taxon == taxon_rule
			contamination = rule[1..-1]	
			contamination.each do |taxon_contamination|
				if sister.include? taxon_contamination
					puts "seqs2remove.rb : contamination --> " + sequence
					seqs2remove << sequence
					treesWcontamination << og
					sequences_contamination.write(sequence + "\n")
				end
			end	
			
			if nm_toggle == "true" && sister == "non-monophyletic"			
				contam_sisters = 0
				sister_minors.each do |sister_minor|
					contamination.each do |taxon_contamination|
						if sister_minor.include? taxon_contamination
							contam_sisters += 1
						end
					end
				end
				
				if contam_sisters == sister_minors.length() - 1					
					puts "seqs2remove.rb : contamination --> " + sequence
					seqs2remove << sequence
					treesWcontamination << og
					sequences_contamination.write(sequence + "\n")
				end
			end
		end
	end
end

trees2reprocess = treesWcontamination.uniq
(total2remove << seqs2remove).flatten!

#total2remove now holds all sequences that are not homologous or are contamination

#If there are trees with contaminating sequences
if treesWcontamination != []
	
	#Record that contamination is being removed from the tree
	trees2reprocess.each do |tree|
		puts "seqs2remove.rb: tree with contamination --> " + tree
		trees_contamination.write(tree + "\n")
	end
	
	puts "\nseqs2remove.rb: removing sequences from pre-Guidance files:"
	
	#For every tree that has contaminating sequences
	trees2reprocess.each do |og|
		#Reading in the current pre-Guidance seqs
		preseqs_raw = File.open(treeFolder + og + '_preguidance.fas_renamed.fas', "r").readlines()
		preseqs = correctFasta(preseqs_raw)
		
		#Creating a new file to hold the pre-Guidance seqs to keep
		new_preseqs_file = File.open(treeFolder + og + '_preguidance.fas_renamed_CONT_LOOP_TEMP.fas', "w")
		
		#Getting all of the sequences to remove from the preguidance file
		to_remove = Array.new
		total2remove.each do |seq2remove|
			if seq2remove.include? og
				to_remove << seq2remove.gsub(/\n/, "")
				
			end
		end
		
		puts og
		
		#For every current pre-Guidance sequence
		index = 0
		preseqs.each do |preseq|
			if preseq =~ /^>/
				tag = preseq.gsub(/>|\n/, "")
				#If the sequence is not in the list of those to remove, then write it to the new pre-Guidance file
				unless to_remove.include? tag
					new_preseqs_file.write(preseq + "\n" + preseqs[index + 1] + "\n")
				else
					puts "\nremoved: " + preseq
					puts "removed: " + preseqs[index + 1] + "\n"
				end
			end
			index += 1
		end
		new_preseqs_file.close
		
		#Writing the new pre-Guidance file and getting rid of the old one
		system "rm " + treeFolder + og + '_preguidance.fas_renamed.fas'
		system "mv " + treeFolder + og + '_preguidance.fas_renamed_CONT_LOOP_TEMP.fas' + " " + treeFolder + og + '_preguidance.fas_renamed.fas'
		
	end
end

